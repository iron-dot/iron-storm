# 1. Set the batch size and learning rate at the same time, set the learning rate to 0.1 and continuously increase it by 0.1, start with the batch size 1 and increase it by 2 to achieve a higher batch size and learning rate.

s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
        
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)




# 2. Set the batch size and learning rate at the same time, set the learning rate to 0.9 and continue to decrease by 0.1, and the batch size to start at 128 and decrease by 2 to achieve a small batch size and low learning rate.

s = 128
t = 0.9
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s < 0:

        s /= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s > 0:
        s -= 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)

    t -= 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)
    
# 3. Add an activation function and add 4 each to compare the performance Write code that uses the best activation function


f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
                    
                    
                

#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기


string = p
#print(string)
print(string.find("class Seq2Seq"))


string4 = string.find("""
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device):
        super().__init__()

""")

string5 = string4+13
print(string[string4:string4+190])
#print(string[string4+11:string5])
"""
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
"""



string3 = string.replace(string[15403:15593], """
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device,
                 activation):
""")




print(string3)






f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기

string = p
#print(string)
print(string.find("model ="))


string4 = string.find("model =")


print(string[string4:string4+70])
#print(string[string4+11:string5])
'''
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
'''



string3 = string.replace(string[string4:string4+70], "model = Seq2Seq(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device, activation='relu').to(device)")
relu = string3

print(string3)



f = open('activation_model1.py', 'a', encoding='utf-8')
f.write(relu)
import subprocess
subprocess.call(['C:/Users/Samsung/AppData/Local/Programs/Python/Python39/python.exe', 'activation_model1.py'])
f = open("loss.txt", 'r', encoding='utf-8')
line1 = f.readlines()
line1 = listToString(line1)


f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
                    
                    
                

#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기


string = p
#print(string)
print(string.find("class Seq2Seq"))


string4 = string.find("""
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device):
        super().__init__()

""")

string5 = string4+13
print(string[string4:string4+190])
#print(string[string4+11:string5])
"""
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
"""



string3 = string.replace(string[15403:15593], """
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device,
                 activation):
""")




print(string3)






f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기

string = p
#print(string)
print(string.find("model ="))


string4 = string.find("model =")


print(string[string4:string4+70])
#print(string[string4+11:string5])
'''
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
'''



string3 = string.replace(string[string4:string4+70], "model = Seq2Seq(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device, activation='sigmoid').to(device)")




print(string3)

sigmoid = string3
f = open('activation_model2.py', 'a', encoding='utf-8')
f.write(sigmoid)
import subprocess
subprocess.call(['C:/Users/Samsung/AppData/Local/Programs/Python/Python39/python.exe', 'activation_model2.py'])
f = open("loss.txt", 'r', encoding='utf-8')
line2 = f.readlines()
line2 = listToString(line2)

f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
                    
                    
                

#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기


string = p
#print(string)
print(string.find("class Seq2Seq"))


string4 = string.find("""
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device):
        super().__init__()

""")

string5 = string4+13
print(string[string4:string4+190])
#print(string[string4+11:string5])
"""
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
"""



string3 = string.replace(string[15403:15593], """
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device,
                 activation):
""")




print(string3)






f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기

string = p
#print(string)
print(string.find("model ="))


string4 = string.find("model =")


print(string[string4:string4+70])
#print(string[string4+11:string5])
'''
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
'''



string3 = string.replace(string[string4:string4+70], "model = Seq2Seq(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device, activation='softmax').to(device)")




print(string3)

softmax = string3
f = open('activation_model3.py', 'a', encoding='utf-8')
f.write(softmax)
import subprocess
subprocess.call(['C:/Users/Samsung/AppData/Local/Programs/Python/Python39/python.exe', 'activation_model3.py'])
f = open("loss.txt", 'r', encoding='utf-8')
line3 = f.readlines()
line3 = listToString(line3)

f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
                    
                    
                

#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기


string = p
#print(string)
print(string.find("class Seq2Seq"))


string4 = string.find("""
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device):
        super().__init__()

""")

string5 = string4+13
print(string[string4:string4+190])
#print(string[string4+11:string5])
"""
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
"""



string3 = string.replace(string[15403:15593], """
class Seq2Seq(nn.Module):
    def __init__(self, 
                 encoder, 
                 decoder, 
                 src_pad_idx, 
                 trg_pad_idx, 
                 device,
                 activation):
""")




print(string3)






f = open('storm.py', 'r', encoding='utf-8')
f2 = f.readlines()
def listToString(str_list):
    
    result = ""

    for s in str_list:

        result += s + ""

    return result.strip()
src3 = listToString(f2)
p = src3
                
# 학습시간을 70분안으로 할수있게만들수있는 것들을 변경 
#100보다 작은수중 랜덤숫자생성후 복사된모델코드로 파일만들어서 epoch에 넣기

string = p
#print(string)
print(string.find("model ="))


string4 = string.find("model =")


print(string[string4:string4+70])
#print(string[string4+11:string5])
'''
string2 = string[string4:string4+14]#string[string4+11:string5]
num_str = str(style)
print(num_str)
'''



string3 = string.replace(string[string4:string4+70], "model = Seq2Seq(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device, activation='Tanh').to(device)")




print(string3)

tanh = string3
f = open('activation_model4py', 'a', encoding='utf-8')
f.write(tanh)

import subprocess
subprocess.call(['C:/Users/Samsung/AppData/Local/Programs/Python/Python39/python.exe', 'activation_model4.py'])
f = open("loss.txt", 'r', encoding='utf-8')
line4 = f.readlines()
line4 = listToString(line4)

f = open("loss.txt", 'r', encoding='utf-8')

times = f.readlines()






line1 = int(line1)

line2 = int(line2)

line3 = int(line3)
line4 = int(line4)
A = [line1, line2, line3, line4]
print(min(A))
B = min(A)
if B == line1:
    print("the smallest number line1")
    f = open('activation function.txt', 'a', encoding='utf-8')
    f.write(relu)

elif B == line2:
    print("the smallest number line2")
    f = open('activation function.txt', 'a', encoding='utf-8')
    f.write(sigmoid)
elif B == line3:
    print("the smallest number line3")
    f = open('activation function.txt', 'a', encoding='utf-8')
    f.write(softmax)
elif B == line4:
    print("the smallest number line4")
    f = open('activation function.txt', 'a', encoding='utf-8')
    f.write(tanh)
    
f = open('activation function.txt', 'r', encoding='utf-8')
f2 = f.readlines()
activation = listToString(f2)
f = open('activation function.py', 'a', encoding='utf-8')
f2 = f.write(activation)
f = open('storm.py', 'w', encoding='utf-8')
f.write(activation)




# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)

# Set the batch size and learning rate (learning rate) at the same time to set the learning rate to 0.1, continuously increasing by 0.1, and increase the batch size by 2, starting with 1.
s = 1 
t = 0.1
for i in range(9):
    f = open("storm.py", 'r', encoding='utf-8')
    f4 = open("ex.txt", "r", encoding='utf-8')
    f5 = f4.readlines()
    f7 = f6.readlines()
    result = int(f5[0:1])
    result = result
    result2 = result - 1
    f6 = open("ex2.txt", "r", encoding='utf-8')
    result3 = int(f7[0:1])
    result4 = result3 - 1

    if s > 0:

        s *= 2
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    elif s == 0:
        s += 1
        num = str(s)
        line = f.readlines()
        line.replace(line[result2:result], 'BATCH_SIZE = ' + num)
        f = open("example.txt", "w", encoding='utf-8')
        f.write('BATCH_SIZE = ' + num)
    t += 0.1
    num = str(t)

    line = f.readlines()
    line.replace(line[result4:result3], 'LEARNING_RATE = ' + num)
    f = open("example.txt", "w", encoding='utf-8')
    f.write('LEARNING_RATE = ' + num)